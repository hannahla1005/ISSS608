---
title: "9 Visualising Distribution"
author: "TzuTing Huang, (Hannah)"
date: "February 1, 2025"
date-modified: "last-modified"
execute:
  warning: false
---

## **9.1 Learning Outcome**

We will introduce two relatively new statistical graphic methods for visualizing distributions: namely the ridgeline plot and the raincloud plot, using ggplot2 and its extensions.

## **9.2 Getting Started**

### **9.2.1 Installing and loading the packages**

```{r}
pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse)
```

### **9.2.2 Data import**

```{R}
exam <- read_csv("data/Exam_data.csv")
```

## **9.3 Visualising Distribution with Ridgeline Plot**

### **9.3.1 Plotting ridgeline graph: ggridges method**

```{R}
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#0000C6", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### **9.3.2 Varying fill colors along the x axis**

Sometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis.

we can have changing fill colors or transparency but not both.

```{R}
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### **9.3.3 Mapping the probabilities directly onto colour**

Beside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.

```{R}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability",
                       direction = -1) +
  theme_ridges()
```

It is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.

### **9.3.4 Ridgeline plots with quantile lines**

By using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.

```{R}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

Instead of using numbers to define quantiles, we can also set them with specific cut points, like the 2.5% and 97.5% tails, to color the ridgeline plot, as shown in the figure below.

```{R}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000", "#A0A0A0A0", "#0000A0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```

## **9.4 Visualising Distribution with Raincloud Plot**

A Raincloud Plot is a data visualization technique that adds a half-density plot to a distribution plot. It gets its name because the density plot resembles a "raincloud." This type of plot improves upon the traditional boxplot by highlighting multiple modes, which can indicate the presence of different groups. While a boxplot does not show where data points are concentrated, a raincloud plot does.

We will use functions from the **ggdist** and **ggplot2** packages to generate the plot.

### **9.4.1 Plotting a Half Eye graph**

```{R}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```

### **9.4.2 Adding the boxplot with `geom_boxplot()`**

Next, the second geometric layer is added using **geom_boxplot()** from **ggplot2**, creating a narrow boxplot. The width is reduced, and the opacity is adjusted for better visibility.

```{R}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)
```

### **9.4.3 Adding the Dot Plots with `stat_dots()`**

Next, the third geometric layer is added using **stat_dots()** from the **ggdist** package. This creates a half-dot plot, similar to a histogram, where the number of dots represents the sample count in each bin. Setting **side = "left"** places the dots on the left-hand side.

```{R}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```

### **9.4.4 Finishing touch**

Lastly, **coord_flip()** from the **ggplot2** package flips the raincloud chart horizontally, giving it the characteristic raincloud appearance. At the same time, **theme_economist()** from the **ggthemes** package is applied to achieve a professional, publication-quality look.

```{R}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist()
```

**Reference**

-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)

-   Claus O. Wilke [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) especially Chapter [6](https://clauswilke.com/dataviz/visualizing-amounts.html), [7](https://clauswilke.com/dataviz/histograms-density-plots.html), [8](https://clauswilke.com/dataviz/ecdf-qq.html), [9](https://clauswilke.com/dataviz/boxplots-violins.html) and [10](https://clauswilke.com/dataviz/visualizing-proportions.html).

-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \[version 2; peer review: 2 approved\]. Welcome Open Res 2021, pp. 4:63.

-   [Dots + interval stats and geoms](https://mjskay.github.io/ggdist/articles/dotsinterval.html)
